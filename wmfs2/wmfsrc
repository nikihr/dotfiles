#
# WMFS2 configuration file
#

# Possible file inclusion:
# @include "file"

# Multi theme section
[themes]

  [theme]
     # No name mean default
     # name = "default"

     font = "terminus-8"

     # Bars
     bars_width = 14
     bars_fg = "#AABBAA"
     bars_bg = "#191919"

     # Element tags
     tags_normal_fg = "#AABBAA"
     tags_normal_bg = "#191919"
     # tags_normal_statusline = ""

     tags_sel_fg    = "#D13A17"
     tags_sel_bg    = "#191919"
     # tags_sel_statusline = ""

     tags_occupied_fg = "#E8AE5B"
     tags_occupied_bg = "#191919"
     tags_occupied_statusline = "\R[0;0;3;3;#AABBAA]"

     tags_border_color = "#112211"
     tags_border_width = 1

     # Frame / Client
     client_normal_fg = "#AABBAA"
     client_normal_bg = "#191919"
     client_normal_statusline = "\s[3;9;#121212;x] \s[2;8;#ff0000;x](1;client_close)"

     client_sel_fg = "#223322"
     client_sel_bg = "#D13017"
     client_sel_statusline = "\s[3;9;#121212;x] \s[2;8;#ff0000;x](1;client_close)"

     frame_bg = "#555555"
     client_titlebar_width = 1
     client_border_width = 1

   [/theme]

[/themes]

[bars]

  # Position:
  #
  # 0  Top
  # 1  Bottom
  # 2  Hide

  # Element type:
  #
  # t  Tags
  # s  Statustext (will take available space)
  # y  Systray (can be set only ONE time among all element)
  # l  Launcher (will be expended at launcher use)

  [bar]
     position = 0
     screen = 0
     elements = "tlsy"   # element order in bar
     theme = "default"
  [/bar]

# [bar]
#    position = 0
#    screen = 1
#    elements = "ts"
#    theme = "default"
# [/bar]

[/bars]

[tags]

  # Use no screen option or screen = -1 to set tag on each screen
  [tag]
      screen = -1
      name = "term"
  [/tag]

  [tag] name = "www" [/tag]
  [tag] name = "devel" [/tag]
  [tag] name = "im" [/tag]
  [tag] name = "p2p" [/tag]
  [tag] name = "music" [/tag]

  # Mousebinds associated to Tags element button
  [mouse] button = "1" func = "tag_click" [/mouse]
  [mouse] button = "4" func = "tag_next"  [/mouse]
  [mouse] button = "5" func = "tag_prev"  [/mouse]


[/tags]

[client]

  [mouse] button = "1" func = "client_focus_click"    [/mouse]
  [mouse] button = "1" func = "mouse_swap"            [/mouse]
  [mouse] button = "2" func = "mouse_tab"             [/mouse]
  [mouse] button = "3" func = "mouse_resize"          [/mouse]
  [mouse] button = "4" func = "client_focus_next_tab" [/mouse]
  [mouse] button = "5" func = "client_focus_prev_tab" [/mouse]

[/client]

[rules]

  [rule]
      instance = "chromium"

      # role   = ""
      # name   = ""
      # theme  = "default"

      tag    = 1  # 2nd tag
      screen = 0

      free       = false
      max        = false
      ignore_tag = false
  [/rule]

[/rules]

[launchers]

  # command can be an uicb function or an uicb function + extension (see example)
  [launcher]
     name = "exec"
     prompt = "Run:"

     # Example of uicb + ext:
     #   command = "spawn xterm -e"
     command = "spawn"

     width = 150
  [/launcher]

[/launchers]

[keys]

  [key] mod = {"Alt", "Shift"} key = "Return" func = "spawn" cmd = "urxvt || xterm" [/key]

  [key] mod = {"Super", "Shift"} key = "q" func = "quit" [/key]
  [key] mod = {"Control", "Alt"} key = "r" func = "reload" [/key]


	# Alsa binds
	[key] mod = {"Super", "Shift"} key = "Down" func = "spawn" cmd = "amixer set Master 2dB- unmute" [/key]

	[key] mod = {"Super", "Shift"} key = "Up"   func = "spawn" cmd = "amixer set Master 2dB+ unmute" [/key]



  # Tag manipulation
  [key] mod = {"Alt", "Shift"} key = "a" func = "tag_set" cmd = "0" [/key]
  [key] mod = {"Alt", "Shift"} key = "s" func = "tag_set" cmd = "1" [/key]
  [key] mod = {"Alt", "Shift"} key = "d" func = "tag_set" cmd = "2" [/key]
  [key] mod = {"Alt", "Shift"} key = "f" func = "tag_set" cmd = "3" [/key]
  [key] mod = {"Alt", "Shift"} key = "g" func = "tag_set" cmd = "4" [/key]
  [key] mod = {"Alt", "Shift"} key = "h" func = "tag_set" cmd = "5" [/key]
  [key] mod = {"Super"} key = "F7" func = "tag_set" cmd = "6" [/key]
  [key] mod = {"Super"} key = "F8" func = "tag_set" cmd = "7" [/key]

  [key] mod = {"Super", "Shift"} key = "F1" func = "tag_client" cmd = "0" [/key]
  [key] mod = {"Super", "Shift"} key = "F2" func = "tag_client" cmd = "1" [/key]
  [key] mod = {"Super", "Shift"} key = "F3" func = "tag_client" cmd = "2" [/key]
  [key] mod = {"Super", "Shift"} key = "F4" func = "tag_client" cmd = "3" [/key]
  [key] mod = {"Super", "Shift"} key = "F5" func = "tag_client" cmd = "4" [/key]
  [key] mod = {"Super", "Shift"} key = "F6" func = "tag_client" cmd = "5" [/key]
  [key] mod = {"Super", "Shift"} key = "F7" func = "tag_client" cmd = "6" [/key]
  [key] mod = {"Super", "Shift"} key = "F8" func = "tag_client" cmd = "7" [/key]

  # tag function: cmd = nameofthetag
  #[key] mod = {"Super"} key = "z" func = "tag" cmd = "2" [/key]

#  [key] mod = {"Control"} key = "Right" func = "tag_next" [/key]
#  [key] mod = {"Control"} key = "Left"  func = "tag_prev" [/key]

#  [key] mod = {"Control"} key = "Up"  func = "screen_next" [/key]
#  [key] mod = {"Control"} key = "Down" func = "screen_prev" [/key]

  [key] mod = {"Alt"} key = "q" func = "client_close" [/key]

  # Focus next / prev client and next / prev tabbed client
  [key] mod = { "Alt" }            key = "Tab" func = "client_focus_next" [/key]
  [key] mod = { "Alt", "Shift" }   key = "Tab" func = "client_focus_prev" [/key]
  [key] mod = { "Super" }          key = "Tab" func = "client_focus_next_tab" [/key]
  [key] mod = { "Super", "Shift" } key = "Tab" func = "client_focus_prev_tab" [/key]

  # Focus next client with direction
  [key] mod = {"Alt"} key = "Left" func = "client_focus_left"   [/key]
  [key] mod = {"Alt"} key = "Right" func = "client_focus_right"  [/key]
  [key] mod = {"Alt"} key = "Up" func = "client_focus_top"    [/key]
  [key] mod = {"Alt"} key = "Down" func = "client_focus_bottom" [/key]

  # swap next client with direction:
  [key] mod = {"Alt", "Shift"} key = "Left" func = "client_swap_left"   [/key]
  [key] mod = {"Alt", "Shift"} key = "Right" func = "client_swap_right"  [/key]
  [key] mod = {"Alt", "Shift"} key = "Up" func = "client_swap_top"    [/key]
  [key] mod = {"Alt", "Shift"} key = "Down" func = "client_swap_bottom" [/key]

  # Resize selected tiled client with direction
  [key] mod = {"Super"} key = "h" func = "client_resize_left"   cmd = "20" [/key]
  [key] mod = {"Super"} key = "l" func = "client_resize_left"   cmd = "-20" [/key]
  [key] mod = {"Super"} key = "k" func = "client_resize_top"    cmd = "20" [/key]
  [key] mod = {"Super"} key = "j" func = "client_resize_top"    cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "h" func = "client_resize_right"  cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "l" func = "client_resize_right"  cmd = "20" [/key]
  [key] mod = {"Super", "Control"} key = "k" func = "client_resize_bottom" cmd = "-20" [/key]
  [key] mod = {"Super", "Control"} key = "j" func = "client_resize_bottom" cmd = "20" [/key]

  # Tabbing command
  [key] mod = {"Alt", "Shift"} key = "h" func = "client_tab_left"   [/key]
  [key] mod = {"Alt", "Shift"} key = "l" func = "client_tab_right"  [/key]
  [key] mod = {"Alt", "Shift"} key = "k" func = "client_tab_top"    [/key]
  [key] mod = {"Alt", "Shift"} key = "j" func = "client_tab_bottom" [/key]
  [key] mod = {"Alt", "Shift"} key = "u" func = "client_untab" [/key]

  # Layout manipulation
  [key] mod = {"Super"}          key = "m" func = "layout_vmirror" [/key]
  [key] mod = {"Super", "Shift"} key = "m" func = "layout_hmirror" [/key]
  [key] mod = {"Super"}          key = "r" func = "layout_rotate_right" [/key]
  [key] mod = {"Super", "Shift"} key = "r" func = "layout_rotate_left" [/key]

  # Layout set historic travelling function (TESTING)
  [key] mod = {"Super"} key = "o" func = "layout_prev_set" [/key]
  [key] mod = {"Super", "Shift"} key = "o" func = "layout_next_set" [/key]

  # Launcher
  [key] mod = {"Alt"} key = "p" func = "launcher" cmd = "exec" [/key]

[/keys]
